// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
// swift-module-flags: -target arm64-apple-xros1.1 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name FindSurfaceFramework
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
@_exported import FindSurfaceFramework
import Foundation
import Swift
import System
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension FindSurfaceFramework.FindSurface {
  public enum FindSurfaceError : Swift.Error {
    case invalidOperation(Swift.String)
    case invalidArgument(Swift.String)
    case failedMemoryAllocation
  }
  public func setPointCloudData(_ data: Swift.UnsafeRawPointer, pointCount: Swift.Int, pointStride: Swift.Int = 0, useDoublePrecision: Swift.Bool) throws
  public func findSurface(featureType type: FindSurfaceFramework.FindSurface.FeatureType, seedIndex index: Swift.Int, seedRadius radius: Swift.Float, rmsError: inout Swift.Float, requestInlierFlags flagRequested: Swift.Bool = false) throws -> FindSurfaceFramework.FindSurfaceResult?
  @inlinable @inline(__always) public func findSurface(featureType type: FindSurfaceFramework.FindSurface.FeatureType, seedIndex index: Swift.Int, seedRadius radius: Swift.Float, requestInlierFlags flagRequested: Swift.Bool = false) throws -> FindSurfaceFramework.FindSurfaceResult? {
        var rmsError: Float = 0
        return try findSurface(featureType: type, seedIndex: index, seedRadius: radius, rmsError: &rmsError, requestInlierFlags: flagRequested)
    }
  @inlinable @inline(__always) public func findPlane(seedIndex index: Swift.Int, seedRadius radius: Swift.Float, rmsError: inout Swift.Float, requestInlierFlags flagRequested: Swift.Bool = false) throws -> FindSurfaceFramework.FindSurfaceResult? {
        return try findSurface(featureType: .plane, seedIndex: index, seedRadius: radius, rmsError: &rmsError, requestInlierFlags: flagRequested)
    }
  @inlinable @inline(__always) public func findPlane(seedIndex index: Swift.Int, seedRadius radius: Swift.Float, requestInlierFlags flagRequested: Swift.Bool = false) throws -> FindSurfaceFramework.FindSurfaceResult? {
        return try findSurface(featureType: .plane, seedIndex: index, seedRadius: radius, requestInlierFlags: flagRequested)
    }
  @inlinable @inline(__always) public func findSphere(seedIndex index: Swift.Int, seedRadius radius: Swift.Float, rmsError: inout Swift.Float, requestInlierFlags flagRequested: Swift.Bool = false) throws -> FindSurfaceFramework.FindSurfaceResult? {
        return try findSurface(featureType: .sphere, seedIndex: index, seedRadius: radius, rmsError: &rmsError, requestInlierFlags: flagRequested)
    }
  @inlinable @inline(__always) public func findSphere(seedIndex index: Swift.Int, seedRadius radius: Swift.Float, requestInlierFlags flagRequested: Swift.Bool = false) throws -> FindSurfaceFramework.FindSurfaceResult? {
        return try findSurface(featureType: .sphere, seedIndex: index, seedRadius: radius, requestInlierFlags: flagRequested)
    }
  @inlinable @inline(__always) public func findCylinder(seedIndex index: Swift.Int, seedRadius radius: Swift.Float, rmsError: inout Swift.Float, requestInlierFlags flagRequested: Swift.Bool = false) throws -> FindSurfaceFramework.FindSurfaceResult? {
        return try findSurface(featureType: .cylinder, seedIndex: index, seedRadius: radius, rmsError: &rmsError, requestInlierFlags: flagRequested)
    }
  @inlinable @inline(__always) public func findCylinder(seedIndex index: Swift.Int, seedRadius radius: Swift.Float, requestInlierFlags flagRequested: Swift.Bool = false) throws -> FindSurfaceFramework.FindSurfaceResult? {
        return try findSurface(featureType: .cylinder, seedIndex: index, seedRadius: radius, requestInlierFlags: flagRequested)
    }
  @inlinable @inline(__always) public func findCone(seedIndex index: Swift.Int, seedRadius radius: Swift.Float, rmsError: inout Swift.Float, requestInlierFlags flagRequested: Swift.Bool = false) throws -> FindSurfaceFramework.FindSurfaceResult? {
        return try findSurface(featureType: .cone, seedIndex: index, seedRadius: radius, rmsError: &rmsError, requestInlierFlags: flagRequested)
    }
  @inlinable @inline(__always) public func findCone(seedIndex index: Swift.Int, seedRadius radius: Swift.Float, requestInlierFlags flagRequested: Swift.Bool = false) throws -> FindSurfaceFramework.FindSurfaceResult? {
        return try findSurface(featureType: .cone, seedIndex: index, seedRadius: radius, requestInlierFlags: flagRequested)
    }
  @inlinable @inline(__always) public func findTorus(seedIndex index: Swift.Int, seedRadius radius: Swift.Float, rmsError: inout Swift.Float, requestInlierFlags flagRequested: Swift.Bool = false) throws -> FindSurfaceFramework.FindSurfaceResult? {
        return try findSurface(featureType: .torus, seedIndex: index, seedRadius: radius, rmsError: &rmsError, requestInlierFlags: flagRequested)
    }
  @inlinable @inline(__always) public func findTorus(seedIndex index: Swift.Int, seedRadius radius: Swift.Float, requestInlierFlags flagRequested: Swift.Bool = false) throws -> FindSurfaceFramework.FindSurfaceResult? {
        return try findSurface(featureType: .torus, seedIndex: index, seedRadius: radius, requestInlierFlags: flagRequested)
    }
}
